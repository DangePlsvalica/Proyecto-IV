generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:123456@localhost:5432/Comunas_local"
}

model Role {
  id     String   @id @default(uuid())
  name   String   @unique
  routes String[]
  users  User[]
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  emailVerified  DateTime?
  roleId         String?
  role           Role?     @relation(fields: [roleId], references: [id])
  hashedPassword String?
  accounts       Account[]
  sessions       Session[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Parroquia {
  id        Int              @id @default(autoincrement())
  nombre    String
  municipio String
  estado    String           @default("Yaracuy")
  comunas   Comuna[]
  cc        ConsejoComunal[]
}

model ConsejoComunal {
  id                        String       @id @default(uuid())
  parroquiaRelation         Parroquia?   @relation(fields: [parroquiaId], references: [id])
  parroquiaId               Int?
  cc                        String       @unique
  rif                       String       @unique
  situr                     String?      @unique
  numeroCuenta              String
  fechaConstitucion         DateTime
  fechaVencimiento          DateTime
  poblacionVotante          Int
  comunaId                  String?
  comuna                    Comuna?      @relation(fields: [comunaId], references: [id], onDelete: SetNull)
  vehiculos                 Vehiculo[]

  titularesComisionElectoral  Persona[] @relation("TitularesComisionElectoral")
  suplentesComisionElectoral  Persona[] @relation("SuplentesComisionElectoral")
  titularesContraloria        Persona[] @relation("TitularesContraloria")
  suplentesContraloria        Persona[] @relation("SuplentesContraloria")
  titularesFinanzas           Persona[] @relation("TitularesFinanzas")
  suplentesFinanzas           Persona[] @relation("SuplentesFinanzas")

  vocerias                  Voceria[]
  proyectos                 Proyecto[]
}

model CategoriaVoceria {
  id       Int           @id @default(autoincrement())
  nombre   String        @unique // Ej: "Economía"
  vocerias TipoVoceria[]
}

model TipoVoceria {
  id            Int              @id @default(autoincrement())
  nombre        String           @unique
  esObligatoria Boolean // Solo true en las 2 ejecutivas obligatorias
  categoriaId   Int
  categoria     CategoriaVoceria @relation(fields: [categoriaId], references: [id])
  vocerias      Voceria[]
}

model Voceria {
  id            Int            @id @default(autoincrement())
  ccId          String
  cc            ConsejoComunal @relation(fields: [ccId], references: [id])
  tipoVoceriaId Int
  tipoVoceria   TipoVoceria    @relation(fields: [tipoVoceriaId], references: [id])

  titularId Int     @unique
  titular   Persona @relation("TitularRelation", fields: [titularId], references: [id])

  suplenteId Int?     @unique
  suplente   Persona? @relation("SuplenteRelation", fields: [suplenteId], references: [id])

  @@unique([ccId, tipoVoceriaId]) // vocería única por cc
}

model Persona {
  id                                Int            @id @default(autoincrement())
  nombres                           String
  apellidos                         String
  ci                                String
  telefono                          String
  vehiculo                          Vehiculo?

  // Relaciones inversas a los arrays del ConsejoComunal
  consejoTitularComisionElectoral   ConsejoComunal[] @relation("TitularesComisionElectoral")
  consejoSuplenteComisionElectoral  ConsejoComunal[] @relation("SuplentesComisionElectoral")
  consejoTitularContraloria         ConsejoComunal[] @relation("TitularesContraloria")
  consejoSuplenteContraloria        ConsejoComunal[] @relation("SuplentesContraloria")
  consejoTitularFinanzas            ConsejoComunal[] @relation("TitularesFinanzas")
  consejoSuplenteFinanzas           ConsejoComunal[] @relation("SuplentesFinanzas")

  // Otras relaciones
  voceriaTitular                    Voceria?       @relation("TitularRelation")
  voceriaSuplente                   Voceria?       @relation("SuplenteRelation")

  // Nuevo campo para la relación con el Banco de la Comuna
  bancoDeLaComunaRelation           Comuna?          @relation("BancoDeLaComuna", fields: [comunaId], references: [id])
  comunaId                          String?
}

// Modelos para las nuevas tablas de consulta y categoría
model Consulta {
  id        String      @id @default(uuid())
  nombre    String
  proyectos Proyecto[]
}

model Categoria {
  id        String      @id @default(uuid())
  nombre    String
  proyectos Proyecto[]
}

// Define el Enum para el impacto
enum TipoImpacto {
  ALTO_RENDIMIENTO
  NORMAL
  BAJO_IMPACTO
}

model Proyecto {
  id                    String      @id @default(uuid())
  nombreProyecto        String
  codigoProyecto        String      @unique
  estatusProyecto       String
  observacion           String?
  familiasBeneficiadas  Int
  personasBeneficiadas  Int
  comunidadesBeneficiadas Int
  impacto                 TipoImpacto?

  // Relaciones con las nuevas tablas
  consultaId              String?
  consulta                Consulta?       @relation(fields: [consultaId], references: [id])
  
  categoriaId             String?
  categoria               Categoria?      @relation(fields: [categoriaId], references: [id])

  consejoComunalId      String
  consejoComunal        ConsejoComunal @relation(fields: [consejoComunalId], references: [id])
}

model Comuna {
  id                      String          @id @default(uuid())
  codigo                  String
  numComisionPromotora    String
  fechaComisionPromotora  DateTime
  rif                     String
  cuentaBancaria          String
  fechaRegistro           DateTime
  nombre                  String
  direccion               String
  linderoNorte            String
  linderoSur              String
  linderoEste             String
  linderoOeste            String
  fechaUltimaEleccion     DateTime
  parroquiaRelation       Parroquia?      @relation(fields: [parroquiaId], references: [id])
  parroquiaId             Int?
  cantidadConsejosComunales Int
  poblacionVotante          Int
  consejosComunales       ConsejoComunal[] // Relación 1-N
  bancoDeLaComuna         Persona[]       @relation("BancoDeLaComuna")
}

enum VehiculoStatus {
  asignado
  reasignado
  extraviado
  devuelto_a_caracas
  inactivo
}

model Vehiculo {
  id                 Int             @id @default(autoincrement())
  placa              String
  clase              String
  cc                 String?
  marca              String
  modelo             String
  color              String
  ano                Int
  serialCarroceria   String
  voceroAsignado     Persona?        @relation(fields: [voceroAsignadoId], references: [id])
  voceroAsignadoId   Int?            @unique
  fechaDeEntrega     DateTime
  estatus            VehiculoStatus  @default(asignado)
  observacionArchivo String?
  observacion        String?
  consejoComunal     ConsejoComunal? @relation(fields: [cc], references: [cc])
}
